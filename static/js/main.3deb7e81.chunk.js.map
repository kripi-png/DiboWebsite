{"version":3,"sources":["navbar.js","commandBox.js","footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","target","React","Component","CommandBox","elem","i","classes","subtitle","question","key","title","data","this","props","elements","map","renderElement","gameCommands","normalCommands","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAGqBA,E,uKAEjB,OAAO,wBAAIC,UAAU,UACb,wBAAIA,UAAU,iBAAgB,uBAAGC,KAAK,MAAK,wCAC3C,wBAAID,UAAU,WAAU,uBAAGC,KAAK,kBAAR,WAAiC,0CACzD,wBAAID,UAAU,WAAU,uBAAGC,KAAK,6BAA6BC,OAAO,UAA5C,eAAiE,0BAAMF,UAAU,SAAhB,QACzF,wBAAIA,UAAU,wBACZ,uBACEC,KAAK,uGACLC,OAAO,UAFT,0B,GAPsBC,IAAMC,WCArBC,E,4KACJC,EAAMC,GACnB,IAAIC,EAGAC,EAGJ,OANkCD,EAAhBF,EAAKI,SAAqB,uBAC7B,cAEmBD,EAAhBH,EAAKG,SAAqB,4BAAI,4BAAKH,EAAKG,WAC1C,KAGd,wBAAIT,UAAWQ,EAASG,IAAKJ,GAAG,8BAAOD,EAAKM,OACzCH,GAAY,M,+BAKT,IAAD,OACDI,EAAOC,KAAKC,MAAMF,KACxB,OAAO,wBAAIb,UAAU,cACX,wBAAIA,UAAU,qBAAqBa,EAAKD,OACvCC,EAAKG,SAASC,KAAK,SAACX,EAAMC,GACzB,OAAS,EAAKW,cAAeZ,EAAMC,W,GApBXJ,IAAMC,WCAzBL,E,uKAEjB,OAAO,yBAAKC,UAAU,UACZ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,eACb,mCACA,uBAAGA,UAAU,aAAb,uBAGJ,yBAAKA,UAAU,cACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cACf,yBAAKA,UAAU,oB,GAZOG,IAAMC,WCEpCe,EAAe,CACnBP,MAAM,gBACNI,SAAU,CACR,CAACJ,MAAO,mBAAoBH,SAAU,mCACtC,CAACG,MAAO,YAAaH,SAAU,4BAC/B,CAACG,MAAO,OAAQH,SAAU,oBAC1B,CAACG,MAAO,WAAYF,UAAU,GAC9B,CAACE,MAAO,oBAAqBF,UAAU,GACvC,CAACE,MAAO,OAAQF,UAAU,KAIxBU,EAAiB,CACrBR,MAAM,0BACNI,SAAU,CACR,CAACJ,MAAO,sBACR,CAACA,MAAO,UACR,CAACA,MAAO,uBACR,CAACA,MAAO,gCACR,CAACA,MAAO,UAkBGS,MAdf,WACE,OACE,yBAAKC,GAAG,OACN,yBAAKA,GAAG,gBAAe,kBAAC,EAAD,OACvB,wBAAItB,UAAU,YAAd,iBAAuC,+CACvC,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAYa,KAAMM,IAClB,kBAAC,EAAD,CAAYN,KAAMO,KAEpB,yBAAKE,GAAG,gBAAe,kBAAC,EAAD,SCzBTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3deb7e81.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nexport default class Navbar extends React.Component {\r\n  render() {\r\n    return <ul className=\"navbar\">\r\n            <li className=\"navItem title\"><a href=\"/#\"><span>Dibo</span></a></li>\r\n            <li className=\"navItem\"><a href=\"/commands.html\">Commands<span>&trade;</span></a></li>\r\n            <li className=\"navItem\"><a href=\"https://discord.gg/vn3ejPR\" target=\"_blank\">Dibo's Home <span className=\"heart\">&#60;3</span></a></li>\r\n            <li className=\"navItem inviteButton\">\r\n              <a\r\n                href=\"https://discordapp.com/oauth2/authorize?client_id=536500891969388564&scope=bot&permissions=290794542\"\r\n                target=\"_blank\"\r\n              >Invite to Server</a>\r\n            </li>\r\n          </ul>;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default class CommandBox extends React.Component {\r\n  renderElement( elem, i ) {\r\n    let classes; if ( elem.question ) classes = \"commandItem question\"\r\n    else classes = \"commandItem\";\r\n\r\n    let subtitle; if (elem.subtitle ) subtitle= <ul><li>{elem.subtitle}</li></ul>\r\n    else subtitle = null;\r\n\r\n    return (\r\n      <li className={classes} key={i}><span>{elem.title}</span>\r\n        {subtitle || ''}\r\n      </li>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n    return <ul className=\"commandBox\">\r\n              <li className=\"commandItem title\">{data.title}</li>\r\n              {data.elements.map( (elem, i ) => {\r\n                return ( this.renderElement( elem, i ) )\r\n              })}\r\n          </ul> ;\r\n  }\r\n}\r\n\r\n// {this.props.data}\r\n// <li className=\"commandItem title\">Game Commands</li>\r\n//\r\n// <li className=\"commandItem\"><span>Rainbow 6: Siege</span>\r\n//   <ul>\r\n//     <li>user stats, map / operator info</li>\r\n//   </ul>\r\n// </li>\r\n// <li className=\"commandItem\"><span>Minecraft</span>\r\n//   <ul>\r\n//     <li>user info, server status</li>\r\n//   </ul>\r\n// </li>\r\n// <li className=\"commandItem\"><span>CSGO</span>\r\n//   <ul>\r\n//     <li>user stats, more</li>\r\n//   </ul>\r\n// </li>\r\n// <li className=\"commandItem question\"><span>Valorant</span></li>\r\n// <li className=\"commandItem question\"><span>League of Legends</span></li>\r\n// <li className=\"commandItem question\"><span>more</span></li>\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default class Navbar extends React.Component {\r\n  render() {\r\n    return <div className=\"footer\">\r\n              <div className=\"footerItem title\">\r\n                <div className=\"titleHolder\">\r\n                  <p>Dibo</p>\r\n                  <p className=\"copyright\">Â© 2020 kripi__</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"separator\"></div>\r\n              <div className=\"footerItem\"></div>\r\n              <div className=\"separator\"></div>\r\n              <div className=\"footerItem\"></div>\r\n          </div>\r\n  }\r\n}\r\n","import React from 'react'\nimport Navbar from './navbar'\nimport CommandBox from './commandBox'\nimport Footer from './footer'\n\nconst gameCommands = {\n  title:'Game Commands',\n  elements: [\n    {title: 'Rainbow 6: Siege', subtitle: 'user stats, map / operator info'},\n    {title: 'Minecraft', subtitle: 'user info, server status'},\n    {title: 'CSGO', subtitle: 'user stats, more'},\n    {title: 'Valorant', question: true},\n    {title: 'League of Legends', question: true},\n    {title: 'more', question: true}\n  ]\n};\n\nconst normalCommands = {\n  title:'Useful and Fun commands',\n  elements: [\n    {title: 'user / server info'},\n    {title: 'avatar'},\n    {title: 'animal pics & facts'},\n    {title: 'random num. gen. / coin flip'},\n    {title: 'more'}\n  ]\n};\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <div id=\"navbarHolder\"><Navbar/></div>\n      <h1 className=\"botTitle\">Multi-purpose <span> Discord Bot</span></h1>\n      <div className=\"boxHolder\">\n        <CommandBox data={gameCommands}/>\n        <CommandBox data={normalCommands}/>\n      </div>\n      <div id=\"footerHolder\"><Footer/></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}